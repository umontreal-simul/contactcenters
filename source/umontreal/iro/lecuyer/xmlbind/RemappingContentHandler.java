package umontreal.iro.lecuyer.xmlbind;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;

/**
 * SAX content handler remapping namespace prefixes.
 * Some tools produces XML without giving control
 * over the prefixes associated with namespace URIs.
 * For example, the JAXB marshaller can output XML, but it
 * generates prefixes such as \texttt{ns2}, \texttt{ns3}, etc.
 * This content handler can be used to filter SAX events
 * generated by such processors to map namespace URIs
 * to user-defined prefixes.
 * One simply provides a map associating prefixes with URIs along
 * with a content handler filtered events are sent to.
 * This content handler is used by {@link JAXBParamsConverter}
 * to implement namsepace prefix mapping independently
 * of the JAXB provider.
 */
public class RemappingContentHandler implements ContentHandler {
   private final Logger logger = Logger.getLogger ("umontreal.iro.lecuyer.xmlbind");
   private ContentHandler targetHandler;
   private final Map<String, String> uriToPrefix = new HashMap<String, String>();

   private int prefixCounter = 1;
   private final Map<String, String> uriToPrefixCur = new HashMap<String, String>();
   private final Map<String, String> prefixToUriCur = new HashMap<String, String>();
   private final Map<String,String> prefixToPrefix = new HashMap<String,String>();
   
   /**
    * Constructs a new remapping content handler
    * sending events to the given target handler, and
    * using the supplied prefix-to-URI map.
    * @param targetHandler the target handler to send events to.
    * @param prefixToUri the prefix-to-URI mapping.
    * @exception NullPointerException if the content handler is \texttt{null}.
    * @exception IllegalArgumentException if one URI
    * is mapped to multiple prefixes.
    */
   public RemappingContentHandler (Map<String, String> prefixToUri, ContentHandler targetHandler) {
      if (targetHandler == null)
         throw new NullPointerException ("null target handler");
      if (prefixToUri == null)
         throw new NullPointerException ("null prefix-to-URI map");
      this.targetHandler = targetHandler;
      for (final Map.Entry<String, String> e : prefixToUri.entrySet ()) {
         final String prefix = e.getKey ();
         final String uri = e.getValue ();
         if (prefix == null || uri == null)
            throw new NullPointerException ("prefix or URI null in prefix-to-URI map");
         if (uriToPrefix.containsKey (uri))
            throw new IllegalArgumentException
            ("The URI " + uri + " is mapped to more than one prefixes");
         uriToPrefix.put (uri, prefix);
      }
   }

   
   /**
    * Returns the target content handler.
    * @return the target content handler.
    */
   public ContentHandler getTargetHandler () {
      return targetHandler;
   }

   /**
    * Sets the target content handler.
    * @param targetHandler the new target handler.
    */
   public void setTargetHandler (ContentHandler targetHandler) {
      if (targetHandler == null)
         throw new NullPointerException ("null target handler");
      this.targetHandler = targetHandler;
   }

   public void startDocument () throws SAXException {
      // Reset the state of the system
      prefixToPrefix.clear ();
      prefixCounter = 1;
      prefixToUriCur.clear ();
      uriToPrefixCur.clear ();
      targetHandler.startDocument ();
   }
   
   public void endDocument () throws SAXException {
      targetHandler.endDocument ();
   }

   public void startElement (String uri, String localName, String qName, Attributes atts) throws SAXException {
      if (localName.length () == 0) {
         // Namespaces are disabled
         targetHandler.startElement (uri, localName, qName, new RemappedAttributes (prefixToUriCur, uriToPrefixCur, prefixToPrefix, atts));
         return;
      }
         
      final String prefix = uriToPrefixCur.get (uri);
      if (prefix == null && uri.length () > 0)
         throw new SAXException
         ("URI " + uri + " does not correspond to a prefix");
      final String newQName = prefix == null || prefix.length () == 0 ? localName : prefix + ":" + localName;
      targetHandler.startElement (uri, localName, newQName, new RemappedAttributes (prefixToUriCur, uriToPrefixCur, prefixToPrefix, atts));
   }

   public void startPrefixMapping (String prefix, String uri) throws SAXException {
      if (uriToPrefixCur.containsKey (uri))
         throw new SAXException
         ("URI " + uri + " already mapped to a prefix");
         
      String targetPrefix = uriToPrefix.get (uri);
      if (targetPrefix == null) {
         logger.warning ("No prefix mapped to URI " + uri);
         if (prefixToUriCur.containsKey (prefix)) {
            targetPrefix = "ns" + prefixCounter++;
            logger.warning ("Proposed prefix " + prefix + " already used; using prefix " + targetPrefix);
         }
         else {
            targetPrefix = prefix;
            logger.warning ("Using proposed prefix " + prefix);
         }
      }
      
      prefixToPrefix.put (prefix, targetPrefix);
      prefixToUriCur.put (targetPrefix, uri);
      uriToPrefixCur.put (uri, targetPrefix);
      targetHandler.startPrefixMapping (targetPrefix, uri);
   }
   
   public void endElement (String uri, String localName, String qName) throws SAXException {
      if (localName.length () == 0) {
         // Namespaces are disabled
         targetHandler.endElement (uri, localName, qName);
         return;
      }
         
      final String prefix = uriToPrefixCur.get (uri);
      if (prefix == null && uri.length () > 0)
         throw new SAXException
         ("URI " + uri + " does not correspond to a prefix");
      final String newQName = prefix == null || prefix.length () == 0 ? localName : prefix + ":" + localName;
      targetHandler.endElement (uri, localName, newQName);
   }

   public void endPrefixMapping (String prefix) throws SAXException {
      final String targetPrefix = prefixToPrefix.get (prefix);
      if (targetPrefix == null)
         throw new SAXException
         ("Prefix " + prefix + " was never mapped");
      prefixToPrefix.remove (prefix);
      final String uri = prefixToUriCur.get (targetPrefix);
      prefixToUriCur.remove (targetPrefix);
      if (uri != null)
         uriToPrefixCur.remove (uri);
   }
   
   public void characters (char[] ch, int start, int length) throws SAXException {
      targetHandler.characters (ch, start, length);
   }

   public void ignorableWhitespace (char[] ch, int start, int length) throws SAXException {
      targetHandler.ignorableWhitespace (ch, start, length);
   }

   public void processingInstruction (String target, String data) throws SAXException {
      targetHandler.processingInstruction (target, data);
   }

   public void setDocumentLocator (Locator locator) {
      targetHandler.setDocumentLocator (locator);
   }

   public void skippedEntity (String name) throws SAXException {
      targetHandler.skippedEntity (name);
   }

   private static class RemappedAttributes implements Attributes {
      private final Map<String, String> prefixToPrefix = new HashMap<String, String>();
      private final Map<String, String> prefixToUriCur = new HashMap<String, String>();
      private final Map<String, String> uriToPrefixCur = new HashMap<String, String>();
      private Attributes atts;

      public RemappedAttributes (Map<String, String> prefixToUriCur, Map<String, String> uriToPrefixCur, Map<String, String> prefixToPrefix, Attributes atts) {
         if (atts == null)
            throw new NullPointerException();
         this.atts = atts;
         this.prefixToUriCur.putAll (prefixToUriCur);
         this.uriToPrefixCur.putAll (uriToPrefixCur);
         this.prefixToPrefix.putAll (prefixToPrefix);
      }
      
      private String getSourcePrefix (String targetPrefix) {
         for (final Map.Entry<String, String> e : prefixToPrefix.entrySet())
            if (e.getValue().equals (targetPrefix))
               return e.getKey();
         return null;
      }
      
      public int getIndex (String uri, String localName) {
         return atts.getIndex (uri, localName);
      }

      public int getIndex (String qName) {
         final int idx = qName.indexOf (':');
         if (idx == -1)
            return atts.getIndex (qName);
         final String targetPrefix = qName.substring (0, idx);
         final String localName = qName.substring (idx + 1);
         final String prefix = getSourcePrefix (targetPrefix);
         if (prefix == null)
            return -1;
         return atts.getIndex (prefix + ":" + localName);
      }

      public int getLength () {
         return atts.getLength ();
      }

      public String getLocalName (int index) {
         return atts.getLocalName (index);
      }

      public String getQName (int index) {
         final String qName = atts.getQName (index);
         if (qName == null)
            return null;
         if (qName.length () == 0)
            return "";
         final int idx = qName.indexOf (':');
         if (idx == -1)
            return qName;
         final String prefix = qName.substring (0, idx);
         final String localName = qName.substring (idx + 1);
         final String targetPrefix = prefixToPrefix.get (prefix);
         if (targetPrefix == null || targetPrefix.length() == 0)
            return localName;
         
         return targetPrefix + ":" + localName;
      }

      public String getType (int index) {
         return atts.getType (index);
      }

      public String getType (String uri, String localName) {
         return atts.getType (uri, localName);
      }

      public String getType (String qName) {
         final int idx = qName.indexOf (':');
         if (idx == -1)
            return atts.getType (qName);
         final String targetPrefix = qName.substring (0, idx);
         final String localName = qName.substring (idx + 1);
         final String prefix = getSourcePrefix (targetPrefix);
         if (prefix == null)
            return null;
         return atts.getType (prefix + ":" + localName);
      }

      public String getURI (int index) {
         return atts.getURI (index);
      }

      public String getValue (int index) {
         return atts.getValue (index);
      }

      public String getValue (String uri, String localName) {
         return atts.getValue (uri, localName);
      }

      public String getValue (String qName) {
         final int idx = qName.indexOf (':');
         if (idx == -1)
            return atts.getValue (qName);
         final String targetPrefix = qName.substring (0, idx);
         final String localName = qName.substring (idx + 1);
         final String prefix = getSourcePrefix (targetPrefix);
         if (prefix == null)
            return null;
         return atts.getValue (prefix + ":" + localName);
      }
   }
}
