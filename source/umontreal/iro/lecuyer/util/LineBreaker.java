package umontreal.iro.lecuyer.util;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.regex.Pattern;

/**
 * Provides facilities to write multiple lines into
 * output streams or writers, with automatic
 * conversion of line separators.
 * Strings are often generated using a string builder 
 * Strings are often generated by string builders before
 * they are written into streams (e.g., files or
 * console).
 * When the generated strings contain multiple lines,
 * the newline character (\texttt{\bs n}) is often used as
 * a line separator, but this does not always
 * correspond to the platform's end-of-line
 * separator.
 * This class can be used to convert the line
 * separators to the appropriate- platform-dependent,
 * line separator before writing strings into
 * streams.
 */
public class LineBreaker {
   private LineBreaker () {}

   private static final Pattern linePattern = Pattern.compile ("\n|\r|\r\n");

   /**
    * Prints the string \texttt{out} using the correct platform-specific line
    * separator. This method splits the given string \texttt{str} using newline
    * characters (\texttt{\bs r}, \texttt{\bs n}, and \texttt{\bs r\bs n}) 
    * as delimiters, and calls {@link PrintWriter#println(String)}
    * for each part.
    * 
    * @param out
    *           the print writer.
    * @param str
    *           the string to write.
    */
   public static void writeLines (PrintWriter out, String str) {
      if (str == null) {
         out.print (str);
         return;
      }
      boolean first = true;
      for (final String part : linePattern.split (str)) {
         if (first)
            first = false;
         else
            out.println ();
         out.print (part);
      }
   }

   /**
    * Similar to {@link #writeLines(PrintWriter, String)}, for a print stream.
    * 
    * @param out
    *           the print stream.
    * @param str
    *           the string.
    */
   public static void writeLines (PrintStream out, String str) {
      if (str == null) {
         out.print (str);
         return;
      }
      boolean first = true;
      for (final String part : linePattern.split (str)) {
         if (first)
            first = false;
         else
            out.println ();
         out.print (part);
      }
   }

   /**
    * Similar to {@link #writeLines(PrintWriter, String)}, for a buffered
    * writer.
    * 
    * @param out
    *           the buffered writer.
    * @param str
    *           the string.
    * @exception if
    *               an I/O error occurs.
    */
   public static void writeLines (BufferedWriter out, String str)
         throws IOException {
      if (str == null) {
         out.write (str);
         return;
      }
      boolean first = true;
      for (final String part : linePattern.split (str)) {
         if (first)
            first = false;
         else
            out.newLine ();
         out.write (part);
      }
   }

   /**
    * Similar to {@link #writeLines(PrintWriter, String)}, for a generic
    * appendable object, and a user-defined line separator
    * \texttt{lineSeparator}.
    * 
    * @param out
    *           the buffered writer.
    * @param str
    *           the string.
    * @param lineSeparator
    *           the line separator.
    * @return the appendable \texttt{out}.
    * @exception if
    *               an I/O error occurs.
    */
   public static <T extends Appendable> T writeLines (T out, String str,
         String lineSeparator) throws IOException {
      if (str == null)
         return null;
      boolean first = true;
      for (final String part : linePattern.split (str)) {
         if (first)
            first = false;
         else
            out.append (lineSeparator);
         out.append (part);
      }
      return out;
   }

   /**
    * Returns the default, platform-dependent,
    * line separator.
    * @return the default line separator.
    */
   public static String getDefaultLineSeparator () {
      return AccessController.doPrivileged (new PrivilegedAction<String> () {

         public String run () {
            return System.getProperty ("line.separator");
         }
      });
   }
}
